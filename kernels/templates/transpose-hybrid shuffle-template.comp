#version 450
#extension GL_KHR_shader_subgroup_shuffle: enable
#define WORKGROUP_SIZE ~WG_SIZE~

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1) in;

layout(set = 0, binding = 0) buffer BM {
    uint[32] bms[];
};
struct Uniforms
{
    uint num_bms;
    uint num_executions;
};
layout(set=0, binding = 1) uniform UniformInput
{
    Uniforms u_consts;
};

uint shuffle_round_tg(uint dst_tix, uint a, uint b, uint m, uint s) {
    uint c;
    if ((dst_tix & s) == 0) {
        c = b << s;
    } else {
        m = ~m;
        c = b >> s;
    }
    return (a & m) | (c & ~m);
}

uint shuffle_round(uint dst_tix, uint a, uint m, uint s) {
    uint b = subgroupShuffleXor(a, s);
    uint c;
    // this predicate is unlike the pure-SIMD shuffle function, which uses gl_SubgroupInvocationID
    if ((dst_tix & s) == 0) {
        c = b << s;
    } else {
        m = ~m;
        c = b >> s;
    }
    return (a & m) | (c & ~m);
}

// Assuming 32x32 bit matrices, we expect at most gl_WorkGroupSize.x >> 5 to be processed by the workgroup.
const uint num_mats_per_wg = gl_WorkGroupSize.x >> 5;
shared uint[32] tg_bms[num_mats_per_wg];
const uint shifts[5] = uint[5](16, 8, 4, 2, 1);
const uint masks[5] = uint[5](0xffff, 0xff00ff, 0xf0f0f0f, 0x33333333, 0x55555555);

void main() {
    uint local_bm_ix = gl_LocalInvocationID.x >> 5;
    uint global_bm_ix = num_mats_per_wg*gl_WorkGroupID.x + local_bm_ix;

    uint dst_tix = gl_LocalInvocationID.x;
    uint dst_rix = dst_tix & 31;

    // comment out OPTION 1 if OPTION 0 is uncommented

    // with OPTION 0 you should see zeroes being successfully saved into output
    // START: OPTION 0
//    tg_bms[local_bm_ix][dst_rix] = dst_dat;
//    barrier();
//
//    bms[global_bm_ix][dst_rix] = 0;
    // END: OPTION 0


    // START: OPTION 1
    if (global_bm_ix < u_consts.num_bms) {

        // when PROBLEM BLOCK is commented, all zeros appear
        // START: PROBLEM BLOCK
        tg_bms[local_bm_ix][dst_rix] = 1;
        barrier();
        // END: PROBLEM BLOCK

        bms[global_bm_ix][dst_rix] = 0;
    }
    // END: OPTION 1
}
