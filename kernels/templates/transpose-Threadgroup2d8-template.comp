#version 450
#define WORKGROUP_SIZE ~WG_SIZE~

// this is a dummy change meant to change the file's modification time
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 32) in;

layout(set = 0, binding = 0) buffer BM {
    uint[32] bms[];
};
struct Uniforms
{
    uint num_bms;
    uint num_executions;
};
layout(set=0, binding = 1) uniform UniformInput
{
    Uniforms u_consts;
};

uint block_swap(uint dst_tid, uint a, uint b, uint m, uint s) {
    uint c;
    if ((dst_tid & s) == 0) {
        c = b << s;
    } else {
        m = ~m;
        c = b >> s;
    }
    return (a & m) | (c & ~m);
}

// There are M bit matrices in the buffer.
// Each workgroup can handle N bit matrices. So, a workgroup's size should be (N, 32, 1).
// There should be at least ceil(M/N) workgroups.
shared uint[32] tg_bms[gl_WorkGroupSize.x];
const uint shifts[5] = uint[5](16, 8, 4, 2, 1);
const uint masks[5] = uint[5](0xffff, 0xff00ff, 0xf0f0f0f, 0x33333333, 0x55555555);

void main() {
    // gl_GlobalInvocationID.x = gl_WorkGroupSize.x*gl_WorkGroupID.x + gl_LocalInvocationID.x?
    uint global_bm_ix = gl_GlobalInvocationID.x;

    if (global_bm_ix < u_consts.num_bms) {
        // Recall that a workgroup's size is (N, 32, 1).
        // gl_LocalInvocationID ranges from (0, 0, 0) to (N - 1, 32 - 1, 0) (inclusive).
        uint local_bm_ix = gl_LocalInvocationID.x;
        uint dst_tix = gl_LocalInvocationID.y;

        uint s;
        uint src_tix;
        uint src_dat;
        uint dst_dat = bms[global_bm_ix][dst_tix];

        for (uint iter = 0; iter < u_consts.num_executions; iter++) {
            for (int i = 2; i < 5; i++) {
                tg_bms[local_bm_ix][dst_tix] = dst_dat;
                barrier();

                s = shifts[i];

                src_tix = dst_tix^s;
                src_dat = tg_bms[local_bm_ix][src_tix];
                barrier();

                dst_dat = block_swap(dst_tix, dst_dat, src_dat, masks[i], s);
            }
        }

        bms[global_bm_ix][dst_tix] = dst_dat;
    }
}
